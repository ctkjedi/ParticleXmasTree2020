// This #include statement was automatically added by the Particle IDE.
#include <FastLED.h>
#include "Particle.h"

FASTLED_USING_NAMESPACE;

#define LED_PIN     D4
#define COLOR_ORDER GRB
#define CHIPSET     WS2812B
#define NUM_LEDS 300 //88 for testing, 300 for prodction
#define BRIGHTNESS  100

//#define FRAMES_PER_SECOND 24

extern const TProgmemRGBGradientPalettePtr gGradientPalettes[];

//#define NUM_LEDS (kMatrixWidth * kMatrixHeight)
#define LAST_VISIBLE_LED 299

// The leds
NSFastLED::CRGB leds[NUM_LEDS];

//twinkle vars
unsigned long previousMillis = 0;
unsigned long currentMillis;
unsigned long twinkleMillis = 0;
float currSpeed = .05;
int wheelSpeed = 20;
int wheelSteps = 24;
int offset = 0;
uint8_t hue = 0;
int totalDrips=5;
int totalModes = 6;
int mode = 5;


const uint16_t XYTable[] = {
    4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
    59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
    119,    120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,
    166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,
    201 ,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
    232,    233,    234,    235,    236,    237,    238,    239,    240,    241,    242,    243,
    255,    256,    257,    258,    259,    260,    261,    262,    263,    264,    265,
    277,    278,    279,    280,    281,    282,    283,    284,
    293,    294,    295,    296,    297,    298,    299
    };
    
//Custom class creates Drips object and stores position and age
class Drips {
    float stringPos; //positon on the strip
    uint16_t age;        //how old drip is to speed up
    //uint8_t stripNumber;  //which strip the drip is on



  public:
    Drips(float yPos, uint16_t howOld) {
      stringPos = yPos;
      age = howOld;
    }

    void updateDrip() {
      //if the current position is less than the last pixel on the strip, increase the position by
      //base speed multiplied by how old it is. Set that pixel's new color and increase it's age
      if ( round(stringPos) > 0) {
        float newPos = stringPos - (currSpeed * age);
        stringPos = newPos;
        leds[(int) stringPos] = CRGB:: White; //water/sparkle drips
        //leds[(int) stringPos]=CHSV(random(0,255),200,random(128,255)); //rainbow drips
        //Serial.println((String)"stringPos " + newPos);
        if (age < 50) age++;
      } else {
        //otherwise run function to choose a new strip and reset it back to 0 position
        resetDrip();
      }
    }

    //Choose a new strip, set its position to the top of said strip and reset its age
    void resetDrip() {
      stringPos = random(0, NUM_LEDS);
      age = 0;
    }

    //A function to randomize drips across all strips
    void randomDrip() {
      stringPos = random(0, NUM_LEDS);
      //Particle.publish("new pixel= "+String(stringPos));
      age = 0;
    }

};

//Array of 5 drips - would love to do this dynamically,
//looping through to create X amount based on totalDrips var
Drips drip[] = {
  Drips(0, 0),
  Drips(0, 0),
  Drips(0, 0),
  Drips(0, 0),
  Drips(0, 0)
};


void setup() {
  delay(3000);
  FastLED.addLeds<CHIPSET, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection( TypicalPixelString );
  FastLED.setBrightness(BRIGHTNESS);
  Particle.variable("mode",mode);
  Particle.function("updateMode", modeChange);
  
  //randomize all them drips
  for (int i = 0; i < totalDrips; i++) {
    drip[i].randomDrip();
  }
  for(int i=0;i<NUM_LEDS;i++){
      leds[i]=CHSV(random8(255), 255, BRIGHTNESS);
  }
  //fill_solid(leds, NUM_LEDS, CRGB:: Red);
}


void loop() {
  currentMillis = millis();
  EVERY_N_SECONDS(45){
      changeMode();
  }
  
    switch (mode) {

    case 0:
      runRainbow();
      twinkle();
      break;

    case 1:
      confetti();
      EVERY_N_MILLISECONDS(30){
        fadeToBlackBy(leds, NUM_LEDS, 1);
        }
      break;

    case 2:
      stripes(10,75,CRGB::Green,CRGB::Red);
      twinkle();
      break;
      
      case 3:
      stripes(10,75,CRGB::White,CRGB::Red);
      twinkle();
      break;
      
      case 4:
      dripPattern();
      break;
      
      case 5:
      colorWheel(wheelSpeed,wheelSteps);
      twinkle();
      break;
  }
}

void changeMode(){
    if(mode+1>=totalModes){
        mode=0;
    }else{
        mode++;
    }
}



void confetti(){
    //fadeToBlackBy(leds,NUM_LEDS,5);
    if(currentMillis-previousMillis>=5){
        previousMillis=currentMillis;
        leds[random(NUM_LEDS)-1] = CHSV(random8(),255,128);
        FastLED.show();
    }
}

void twinkle() {
  //create random twinkle
  int rp = random(100, 2000);
  if (currentMillis - twinkleMillis >= rp) {
    twinkleMillis = currentMillis;
    leds[random(NUM_LEDS-1)] = CRGB::White;
    FastLED.show();
  }
}

void runRainbow() {
  if (currentMillis - previousMillis >= 30) {
    previousMillis = currentMillis;
    static uint8_t hue = 0;
    fill_rainbow(leds, NUM_LEDS, hue++);
  }
  FastLED.show();
}

void stripes(int stripeLength, int travelSpeed, int color1, int color2){
    if (currentMillis - previousMillis >= travelSpeed) {
    previousMillis = currentMillis;
        for(int i=0;i<NUM_LEDS;i++){
            if( (i+offset)%(2*stripeLength)<stripeLength+1 ){
                leds[i] = color2;
            }else{
                leds[i] = color1;
            }
        }
        FastLED.setBrightness(25);
        //twinkle();
        FastLED.show();
            offset++;
            if(offset>=NUM_LEDS) offset = 0;
    }
}

int modeChange(String newMode){
    int modeNum = newMode.toInt();
    mode = modeNum;
    //EEPROM.put(eepAddr, modeNum);
}


int updateWheelSteps(String newSteps){
    wheelSteps = newSteps.toInt();
}

int updateWheelSpeed(String newSpeed){
    wheelSpeed = newSpeed.toInt();
}

void showDrips() {
  fadeToBlackBy(leds, NUM_LEDS, 64);
  for (int i = 0; i < totalDrips; i++) {
    drip[i].updateDrip();
  }
  FastLED.show();
}

void dripPattern() {
  EVERY_N_MILLISECONDS(60) {
    showDrips();
  }
}

void colorWheel(int speed, int steps){
    if (currentMillis - previousMillis >= speed) {
    previousMillis = currentMillis;
    for(int i=0;i<NUM_LEDS;i++){
        leds[i] = CHSV(hue,255,100);
        hue = hue+steps;
    }
    //fill_rainbow(leds, NUM_LEDS, hue++);
  }
  FastLED.show();
}
